model Hybrid_Efficient_Model
uses "mmxprs"; !gain access to the Xpress-Optimizer solver

parameters
	h = "1"
	w = "1"
	FILE_DATA =  "input-output-" + w + ".txt"
	k = 2
end-parameters

declarations
	
	s_r:integer
	m_r:integer
	s_nr:integer
	m_nr:integer
	n:integer
	
end-declarations

initializations from FILE_DATA
	s_r
	m_r
	s_nr
	m_nr
	n
end-initializations

declarations
	
	row1_r = 1..m_r
	row2_r = 1..s_r
	row1_nr = 1..m_nr
	row2_nr = 1..s_nr
	col = 1..n
	su = n+m_r*2+4
	out = 1..su
	
	Teta: mpvar
	Mi: mpvar
	Lamda: array( col ) of mpvar
	t: mpvar
	s_meno_nr: array(row1_nr) of mpvar
	s_piu_nr: array(row1_nr) of mpvar
	
	m: integer
	m_div: real
	uno_m: real
	s: integer
	s_div: real
	uno_s: real
	y:  array( row2_r,col ) of real
	x:  array( row1_r,col ) of real
	y_nr:  array( row2_nr,col ) of real
	x_nr:  array( row1_nr,col ) of real
	output: array(out) of string
	
end-declarations

initializations from "mmsheet.xlsx:Input-Output-"+h+".xlsx"
	y as "noindex;Output"+w
	x as "noindex;Input"+w
	y_nr
	x_nr
end-initializations


m:= m_r + m_nr
m_div:= m_r/m
uno_m:= 1/m
s:= s_r + s_nr
s_div:= s_r/s
uno_s:= 1/s

forall(j in row1_r)
	Teta * x(j, k) >= sum(i in col) x(j, i) * Lamda(i)
	
forall(j in row2_r)
	Mi * y(j, k) <= sum(i in col) y(j, i) * Lamda(i)

forall(j in row1_nr)
	t * x_nr(j,k) = sum(i in col) x_nr(j, i) * Lamda(i) + s_meno_nr(j)	

forall(j in row2_nr)
	t * y_nr(j,k) = sum(i in col) y_nr(j, i) * Lamda(i) - s_piu_nr(j)	

Teta <= t
Mi >= t

forall(i in col)
	Lamda(i) >= 0
	
forall(i in row1_nr)
	 s_meno_nr(i) >= 0
	 
forall(i in row2_nr)
	 s_piu_nr(i) >= 0

t + s_div * ( Mi - t ) + uno_s * sum (j in row1_nr) s_piu_nr(j) / y_nr(j , k) = 1
 
teta:= t- (m_div * (t - Teta)) - uno_m * sum(j in row1_nr) (s_meno_nr(j)/x_nr(j,k))	 
	 
minimize(teta)

forall(i in col)
	output(i) := string(getsol(Lamda(i)))

forall(i in row1_nr)
	output(i + n) := string(getsol(s_meno_nr(i)))

forall(i in row1_nr)
	output(i + n + m_r) := string(getsol(s_piu_nr(i)))

output(n+m_r*2+1) := string(getsol(Teta))

output(n+m_r*2+2) := string(getsol(Mi))

output(n+m_r*2+3) := string(getsol(t))

soluzione := string(getsol(teta))

case getprobstat of
  XPRS_OPT: status:="Optimum found"
  XPRS_UNF: status:="Unfinished"
  XPRS_INF: status:="Infeasible"
  XPRS_UNB: status:="Unbounded"
  XPRS_OTH: status:="Failed"
  else status:="???"
end-case

output(n+m_r*2+4) := status;

initializations to "mmsheet.xlsx:test"+h+"/Soluzioni-"+w+".xlsx"
  output as 'noindex;HYBRID_DMU_' + k
end-initializations

initializations to "mmsheet.xlsx:test"+h+"/DMU/dmu-"+k+".xlsx"
  soluzione as 'noindex;HYBRID_' + w
end-initializations

end-model
